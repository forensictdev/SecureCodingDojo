[
    {
        "categoryId":"codereview101_inputValidation",
        "categoryName":"Input Validation",
        "categoryDetails":"categoryInputValidation.md",
        "questions":[
            {
                "questionId":"inputValidation.q1",
                "language":"java",
                "lineToHighlight":3,
                "question":"Which of the following code snippets prevents a vulnerability?",
                "snippets":[
                    "snipInputValidation1.java",
                    "snipInputValidation2.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is preventing a vulnerability by using input allow listing.",
                "incorrectReasoning": "Incorrect! While there is some validation, it is based on block listing and will still allow command injection (ex. `rm -rf /`)."
            }
        ]

    },

    {
        "categoryId":"codereview101_paramStatements",
        "categoryName":"Parameterized Statements",
        "categoryDetails":"categoryParamStatements.md",
        "questions":[
            {
                "questionId":"paramStatements.q1",
                "language":"java",
                "lineToHighlight":7,
                "question":"Which of the following code snippets prevents a SQL INJECTION?",
                "snippets":[
                    "snipParamStatements5.java",
                    "snipParamStatements6.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample is preventing a vulnerability by using a Prepared Statement which does not allow the execution of the malicious string.",
                "incorrectReasoning": "Incorrect! The sample is concatenating the input to the SQL Statement which executes a malicious string"
            },
            {
                "questionId":"paramStatements.q2",
                "language":"java",
                "lineToHighlight":9,
                "question":"Which of the following code snippets allows an OS COMMAND INJECTION?",
                "snippets":[
                    "snipParamStatements7.java",
                    "snipParamStatements8.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample allows an OS Command Injection because it executes the string directly in the OS which can be dangerous!.",
                "incorrectReasoning": "Incorrect! The code sample uses correctly a function (ProcessBuilder) to limit the input string of the user at the execution level."
            },
            {
                "questionId":"paramStatements.q3",
                "language":"java",
                "lineToHighlight":2,
                "question":"Which of the following code snippets prevents OS COMMAND INJECTION?",
                "snippets":[
                    "snipParamStatements9.java",
                    "snipParamStatements10.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample uses correctly a function to prevent an OS COMMAND INJECTION at the execution level.",
                "incorrectReasoning": "Incorrect! The sample is actually concatenating the input to command at the execution level and can be dangerous."
            },
            {
                "questionId":"paramStatements.q4",
                "language":"java",
                "lineToHighlight":6,
                "question":"Which of the following code snippets prevents a SQL INJECTION?",
                "snippets":[
                    "snipParamStatements11.java",
                    "snipParamStatements12.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is preventing a vulnerability by using a Prepared Statement which does not allow the execution of the malicious string.",
                "incorrectReasoning": "Incorrect! The sample is concatenating the input to the SQL Statement which executes a malicious string."
            }
        ]

    },

    {
        "categoryId":"codereview101_brokenAuthentication",
        "categoryName":"Broken authentication and Session management",
        "categoryDetails":"categoryBrokenAuthentication.md",
        "questions":[
            {
                "questionId":"brokenAuthentication.q1",
                "language":"java",
                "lineToHighlight":4,
                "question":"Which of the following code snippets is the secure way to authenticate a user password?",
                "snippets":[
                    "snipBrokenAuth1.java",
                    "snipBrokenAuth2.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is the right way to authenticate the user password in a code.",
                "incorrectReasoning": "Incorrect! The sample is using a plain text password for comparison, which is insecure!."
            },
            {
                "questionId":"brokenAuthentication.q2",
                "language":"java",
                "lineToHighlight":4,
                "question":"Which of the following code snippets creates a secure session token?",
                "snippets":[
                    "snipBrokenAuth3.java",
                    "snipBrokenAuth4.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample creates a secure session token using a random function for it!.",
                "incorrectReasoning": "Incorrect! The code sample uses the username as part of the session token without any other random info!."
            },
            {
                "questionId":"brokenAuthentication.q3",
                "language":"java",
                "lineToHighlight":4,
                "question":"Which of the following code snippets is an insecure way to authenticate a user?",
                "snippets":[
                    "snipBrokenAuth5.java",
                    "snipBrokenAuth6.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample uses plain text comparison of the user's stored password for comparison",
                "incorrectReasoning": "Incorrect! The sample is actually comparing user's stored and hashed password against a hashed password of the input string!."
            },
            {
                "questionId":"brokenAuthentication.q4",
                "language":"java",
                "lineToHighlight":4,
                "question":"Which of the following code snippets uses a secure session token?",
                "snippets":[
                    "snipBrokenAuth7.java",
                    "snipBrokenAuth8.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample creates a secure session token using a random function for it!.",
                "incorrectReasoning": "Incorrect! The code sample uses some random info for the session but does not have any review of the expiration time ."
            }
        ]

    },

     {
        "categoryId":"codereview101_securityMisconfiguration",
        "categoryName":"Security Misconfiguration",
        "categoryDetails":"categorySecurityMisconfiguration.md",
        "questions":[
            {
                "questionId":"securityMisconfiguration.q1",
                "language":"xml",
                "lineToHighlight":9,
                "question":"Which of the following code snippets has a wrong configuration?",
                "snippets":[
                    "snipSecurityMisconfiguration1.xml",
                    "snipSecurityMisconfiguration2.xml"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample has an error to handle the access to the protected resource",
                "incorrectReasoning": "Incorrect! The code sample is handling correctly the access to the protected resource."
            },
            {
                "questionId":"securityMisconfiguration.q2",
                "language":"java",
                "lineToHighlight":4,
                "question":"Which of the following code snippets has a configuration error?",
                "snippets":[
                    "snipSecurityMisconfiguration3.java",
                    "snipSecurityMisconfiguration4.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample loads a policy with all the permissions",
                "incorrectReasoning": "Incorrect! The code sample uses a custom policy that sets up the correct permissions."
            },
            {
                "questionId":"securityMisconfiguration.q3",
                "language":"java",
                "lineToHighlight":7,
                "question":"Which of the following code snippets has a configuration error?",
                "snippets":[
                    "snipSecurityMisconfiguration5.java",
                    "snipSecurityMisconfiguration6.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample has an error during the connection stablishment",
                "incorrectReasoning": "Incorrect! The sample code makes a secure connection validating hostname and session."
            }
        ]

    },

    {
        "categoryId":"codereview101_sensitiveDataExposure",
        "categoryName":"Sensitive Data Exposure",
        "categoryDetails":"categorySensitiveDataExposure.md",
        "questions":[
            {
                "questionId":"sensitiveDataExposure.q1",
                "language":"java",
                "lineToHighlight":4,
                "question":"Which of the following code snippets exposes sensitive data of the user?",
                "snippets":[
                    "snipSensitiveDataExposure1.java",
                    "snipSensitiveDataExposure2.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample exposes the credit card number of a user",
                "incorrectReasoning": "Incorrect! The code sample masquerades the credit card number!"
            },
            {
                "questionId":"sensitiveDataExposure.q2",
                "language":"java",
                "lineToHighlight":6,
                "question":"Which of the following code snippets exposes sensitive data of the user?",
                "snippets":[
                    "snipSensitiveDataExposure3.java",
                    "snipSensitiveDataExposure4.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample exposes the user and password in the URL!",
                "incorrectReasoning": "Incorrect! The code sample uses a POST to send the user and password protected by TLS."
            },
            {
                "questionId":"sensitiveDataExposure.q3",
                "language":"java",
                "lineToHighlight":7,
                "question":"Which of the following code snippets exposes sensitive data of the user?",
                "snippets":[
                    "snipSensitiveDataExposure5.java",
                    "snipSensitiveDataExposure6.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample has a hardcoded user and password for the DB!",
                "incorrectReasoning": "Incorrect! The sample code loads the sensitive information from environment variables!."
            }
        ]

    },

    {
        "categoryId":"codereview101_csrf",
        "categoryName":"Cross Site Request Forgery",
        "categoryDetails":"categoryCSRF.md",
        "questions":[
            {
                "questionId":"csrf.q1",
                "language":"java",
                "lineToHighlight":7,
                "question":"Which of the following code snippets PREVENTS a CSRF vulnerability?",
                "snippets":[
                    "snipCSRF1.java",
                    "snipCSRF2.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample uses a token to prevent a CSRF vuln!",
                "incorrectReasoning": "Incorrect! The code sample does not use any measure to prevent a CSRF!"
            },
            {
                "questionId":"csrf.q2",
                "language":"html",
                "lineToHighlight":2,
                "question":"Which of the following code snippets is vulnerable to CSRF?",
                "snippets":[
                    "snipCSRF3.html",
                    "snipCSRF4.html"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample does not use a measure to prevent the vulnerability.",
                "incorrectReasoning": "Incorrect! The code sample uses a csrf token to prevent the vulnerability."
            },
            {
                "questionId":"csrf.q3",
                "language":"java",
                "lineToHighlight":9,
                "question":"Which of the following code snippets PREVENTS a CSRF vulnerability?",
                "snippets":[
                    "snipCSRF5.java",
                    "snipCSRF6.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample has a CSRF token that prevents the vulnerability!",
                "incorrectReasoning": "Incorrect! The sample code does not prevent the vulnerability!."
            }
        ]

    },
    
    {
        "categoryId":"codereview101_memory",
        "categoryName":"Memory Best Practices",
        "categoryDetails":"categoryMemory.md",
        "questions":[
            {
                "questionId":"memory.q1",
                "lineToHighlight":3,
                "language":"C++",
                "question":"Which of the following code snippets prevents a Buffer Overflow vulnerability?",
                "snippets":[
                    "snipMemory1.cpp",
                    "snipMemory2.cpp"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample is preventing a vulnerability by using a function that controls the size of the input ('fgets').",
                "incorrectReasoning": "Incorrect! The sample is using an insecure function: 'gets'. This function will overflow the buffer."
            },

            {
                "questionId":"memory.q2",
                "lineToHighlight":3,
                "language":"C++",
                "question":"Which of the following code snippets employs a best practice to avoid the Incorrect Calculation of Buffer Size?",
                "snippets":[
                    "snipMemory3.cpp",
                    "snipMemory4.cpp"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample is preventing a vulnerability by using the BUFFER_SIZE constant to ensure the size of the buffer is allocated consistently.",
                "incorrectReasoning": "Incorrect! The sample is using numeric values to allocate the size of the buffer. Notice that the buffer size is '5' but '9' characters can be read into the buffer."
            },

            {
                "questionId":"memory.q3",
                "lineToHighlight":7,
                "language":"C++",
                "question":"Off-by-one is introduced when employing incorrect comparison operators. Which snippet prevents this type of flaw?",
                "snippets":[
                    "snipMemory5.cpp",
                    "snipMemory6.cpp"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code is using '<' and will stop at the right time.",
                "incorrectReasoning": "Incorrect! The sample is using '<=' which means one extra iteration resulting in off by one."
            },

            {
                "questionId":"memory.q4",
                "lineToHighlight":7,
                "language":"C++",
                "question":"Format String Injection is a type of vulnerability caused by concatenating or using user input in a format parameter. Which snippet avoids the vulnerability?",
                "snippets":[
                    "snipMemory7.cpp",
                    "snipMemory8.cpp"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code is not passing the input as a format argument.",
                "incorrectReasoning": "Incorrect! The sample is actually passing the input as a format argument to 'printf'."
            }
        ]

    },

    {
        "categoryId":"codereview101_data",
        "categoryName":"Protecting Data",
        "categoryDetails":"categoryData.md",
        "questions":[
            {
                "questionId":"data.q1",
                "lineToHighlight":6,
                "language":"java",
                "question":"Which of the following code snippets indicates that the password is stored correctly?",
                "snippets":[
                    "snipData1.java",
                    "snipData2.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample indicates the password is hashed with PBKDF2 + a salt + iterations.",
                "incorrectReasoning": "Incorrect! The code indicates that the password is compared to the value provided by the user, meaning the password is stored in the clear."
            },

            {
                "questionId":"data.q2",
                "lineToHighlight":2,
                "language":"java",
                "question":"Can you spot the code that transmits data securely?",
                "snippets":[
                    "snipData3.java",
                    "snipData4.java"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code uses TLS 'https://' and sends data using POST, which doesn't store the parameters in web logs.",
                "incorrectReasoning": "Incorrect! The code is sending a user name and a password via a 'http://' url and risks of storing the credentials in web logs."
            },

            {
                "questionId":"data.q3",
                "lineToHighlight":2,
                "language":"javascript",
                "question":"Can you spot the code that anonymizes and encrypts the data?",
                "snippets":[
                    "snipData5.js",
                    "snipData6.js"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code removes the credit card number and also encrypts the data before storing.",
                "incorrectReasoning": "Incorrect! The code is storing the transaction in clear text including the credit card number!"
            }
        ]

    },
    {
        "categoryId":"codereview101_xss",
        "categoryName":"Preventing Cross-Site Scripting",
        "categoryDetails":"categoryXSS.md",
        "questions":[
            {
                "questionId":"xss.q1",
                "language":"html",
                "lineToHighlight":8,
                "question":"Which of the following code snippets prevents XSS through HTML Encoding?",
                "snippets":[
                    "snipXSS1.jsp",
                    "snipXSS2.jsp"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample is neutralizing HTML markup.",
                "incorrectReasoning": "Incorrect! The code outputs the input 'as is', allowing '<script>' tags to be inserted in the page."
            },

            {
                "questionId":"xss.q2",
                "language":"html",
                "lineToHighlight":4,
                "question":"Both code samples use HTML Encoding but which one uses the correct encoding for the output context?",
                "snippets":[
                    "snipXSS3.jsp",
                    "snipXSS4.jsp"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample is neutralizing the single quote as well.",
                "incorrectReasoning": "Incorrect! The encoding misses the single quote which allows XSS with a payload like: '+alert(1)+'."
            },
            
            {
                "questionId":"xss.q3",
                "language":"html",
                "lineToHighlight":7,
                "question":"Of the two code samples shown below, which one PREVENT XSS injections via HTML encoding?",
                "snippets":[
                    "snipXSS11.jsp",
                    "snipXSS12.jsp"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is using a function to scape special characters in HTML",
                "incorrectReasoning": "Incorrect! The code sample does not escape special characters and creates a XSS vuln."
            },
            
            {
                "questionId":"xss.q4",
                "language":"javascript",
                "lineToHighlight":8,
                "question":"In this case the application is implementing its own client side rendering of the input instead of taking advantage of a JS framework. Can you tell which snippet is safer?",
                "snippets":[
                    "snipXSS5.js",
                    "snipXSS6.js"
                ],
                "answer":0,
                "correctReasoning":"You're right! The code sample is updating the element text.",
                "incorrectReasoning": "Incorrect! The code sample is updating the element html which will allow XSS with a payload like: <img src=x onerror=alert(1)>."
            }

        ]

    },

    {
        "categoryId":"codereview101_indirectReferences",
        "categoryName":"Indirect Object References",
        "categoryDetails":"categoryIndirectReferences.md",
        "questions":[
            {
                "questionId":"indirectReferences.q1",
                "language":"java",
                "lineToHighlight":7,
                "question":"Which of the following code snippets prevents Open Redirect?",
                "snippets":[
                    "snipIndirectReferences5.java",
                    "snipIndirectReferences6.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is preventing arbitrary redirects using validation of the user id",
                "incorrectReasoning": "Incorrect! The code is referencing the URL directly allowing a Open Redirect spoofing attack."
            },

            {
                "questionId":"indirectReferences.q2",
                "language":"java",
                "lineToHighlight":7,
                "question":"Which of the following code snippets prevents Open Redirect?",
                "snippets":[
                    "snipIndirectReferences7.java",
                    "snipIndirectReferences8.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is preventing arbitrary redirects.",
                "incorrectReasoning": "Incorrect! The code is referencing the URL using an input manipulated by the user"
            },

            {
                "questionId":"indirectReferences.q3",
                "language":"java",
                "lineToHighlight":6,
                "question":"Which of the following code snippets is vulnerable to an Open Redirect?",
                "snippets":[
                    "snipIndirectReferences9.java",
                    "snipIndirectReferences10.java"
                ],
                "answer":1,
                "correctReasoning":"You're right! The code sample is preventing does not make any kind of prevention of the vulnerability.",
                "incorrectReasoning": "Incorrect! The code is using a function that validates the URL previous to the redirection!"
            }
        ]

    }

]
